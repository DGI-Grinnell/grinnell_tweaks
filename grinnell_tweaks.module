<?php

/*
function grinnell_tweaks_form_content_model_viewer_ingest_metadata_form_alter(&$form, &$form_state) {
  dpm($form);
  $format = "o-m-d\TH:i:s\Z";
  $present = time();
  $formatted = date($format,$present);
  $date_fields = array('accessioned','submitted','available','created');
  
  if ('MODS Form' == $form['forms']['#value'] && 2 == $form['#parameters'][1]['storage']['step']) {
    foreach($date_fields as $date_field) {
      $form['originInfo']['dates'][$date_field]['#default_value'] = $formatted;
    }
  }
}
*/

function grinnell_tweaks_menu_alter(&$items) {
  $items['islandora/solr/search']['page callback'] = 'grinnell_tweaks_islandora_solr_search';
}

function grinnell_tweaks_islandora_solr_search($query, $fq = NULL, $dismax = NULL, $display = NULL) {
  if (isset($_REQUEST['form_id'])) {
    switch ($_REQUEST['form_id']) {
      case 'scholar_search_form':
      case 'islandora_extended_search_form':
        $_SESSION['scholar']['search']['sort'] = $_REQUEST['sort'];
        $_SESSION['scholar']['search']['order'] = $_REQUEST['order'];
        $_SESSION['islandora_extended_search']['sort'] = $_REQUEST['sort'];
        $_SESSION['islandora_extended_search']['order'] = $_REQUEST['order'];
        break;
    }
  }
  return islandora_solr_search($query,$fq,$dismax,$display);
}

/**
 * Implementation of hook_form_alter().
 */
function grinnell_tweaks_form_alter(&$form, $form_state, $form_id) {
  if (preg_match('/^contact_mail_page/',$form_id)) {
    $drawer_link = l('v Grinnell College Contact Information v','');
    $form['#prefix'] = '<div id="contact-form-drawer">';
    $form['#suffix'] = '</div><div class="contact-form-link-wrapper">'. $drawer_link . '</div>';
  }
  if ('islandora_extended_search_form' == $form_id) {
    $keys = array_keys($form['terms']);
    $numeric_keys = array_filter($keys,'is_numeric');
    foreach ($numeric_keys as $key) {
      $form['terms'][$key]['field']['#value'] = 'text';
    }
  }
  if ('islandora_xacml_editor_page' == $form_id) {
    // stop Team Grinnell hanging themselves by blocking access to XML or RDF datastreams,
    // which will make DC, MODS, RELS-[IN|EX]T and XACML policies not work 
    unset($form['dsidmime']['mime']['#options']['application/rdf+xml']);
    unset($form['dsidmime']['mime']['#options']['text/xml']);
    // ... and stop them blocking the protected datastreams themselves
    unset($form['dsidmime']['dsid']['#options']['DC']);
    unset($form['dsidmime']['dsid']['#options']['MODS']);
    unset($form['dsidmime']['dsid']['#options']['RELS-EXT']);
    unset($form['dsidmime']['dsid']['#options']['RELS-INT']);
    unset($form['dsidmime']['dsid']['#options']['COLLECTION_POLICY']);
    unset($form['dsidmime']['dsid']['#options']['POLICY']);
  }
}

function grinnell_tweaks_islandora_solr_search_query_processor() {

  GLOBAL $user;
  
  $users = array('anonymous');
  $roles = array('all');
  
  if (!user_is_anonymous()) {
    $users[] = _grinnell_tweaks_in_quotes($user->name);
    $roles = array_merge($roles, array_map('_grinnell_tweaks_in_quotes',$user->roles));
  }
  else {
    $roles[] = '"anonymous user"';
  }
      
  $params['fq'] = array(
     '+(rels.isViewableByUser:('. join(' OR ',$users) .') OR rels.isViewableByRole:('. join(' OR ',$roles) .'))',
  );
  
  if (isset($_SESSION['scholar']['search']['sort'])) {
    $sort = $_SESSION['scholar']['search']['sort'];
    if (isset($_SESSION['scholar']['search']['order'])) {
      $order = $_SESSION['scholar']['search']['order'];
      $params['sort'] = $sort .' '. $order;
    }
  }
  return $params;
  
}


function _grinnell_tweaks_in_quotes($string) {
  return '"'. $string .'"';
}

/**
 * Implementation of hook_menu().
 */
function grinnell_tweaks_menu() {
  $items = array();

  $items['viewer/%/%/raw'] = array(
    'title' => $repository_title,
    'page callback' => 'repository_page',
    'page arguments' => array(1, 2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('view fedora collection'),
  );

  $items['admin/policy_sync/%'] = array(
    'title' => 'Menu item',
    'description' => 'The description of the menu item. It is used as title attribute and on the administration overview page.',
    'page callback' => 'grinnell_tweaks_policy_sync_batch',
    'page arguments' => array(2),
    'type' => MENU_CALLBACK,
    'access arguments' => array('administer grinnell_tweaks'),
  );
  
  
  return $items;
}

function grinnell_tweaks_policy_sync_batch($collection_pid) {

  module_load_include('inc','fedora_repository','api/fedora_collection');
    
  $batch = array(
    'operations' => array(),
    'finished' => 'grinnell_tweaks_policy_sync_finished',
    'title' => t('Processing Policy Sync'),
    'init_message' => t('Policy Sync Batch is starting.'),
    'progress_message' => t('Processed @current out of @total.'),
    'error_message' => t('Policy Sync Batch has encountered an error.'),
    'file' => drupal_get_path('module', 'grinnell_tweaks') . '/policy_sync.inc',
  );

  $pids = get_related_items_as_array($collection_pid);
  foreach($pids as $pid) {
    $batch['operations'][] = array('grinnell_tweaks_sync_policy', array($pid));
  }
  batch_set($batch);
  batch_process('node');
  
}




